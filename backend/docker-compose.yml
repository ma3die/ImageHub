version: '3.8'

services:
  web:
    build:
      context: .
      args:
        SERVICE: web  # Передаем аргумент для сборки веб-приложения
    ports:
      - "8000:8000"
    depends_on:
      rabbitmq:
        condition: "service_healthy"
      db:
        condition: "service_started"
      redis:
        condition: "service_healthy"
    volumes:
      - .:/app  # Связываем локальную директорию с контейнером
    env_file:
      - .env  # Загружаем переменные окружения из .env

  image_processor:
    build:
      context: .
      args:
        SERVICE: image_processor  # Передаем аргумент для сборки сервиса обработки изображений
    depends_on:
      rabbitmq:
        condition: "service_healthy" # Убедитесь, что RabbitMQ запущен перед сервисом
      redis:
        condition: "service_healthy"
    env_file:
      - .env  # Загружаем переменные окружения из .env

  celery:
    build:
      context: .
    command: celery -A backend worker -l info --pool=solo
    depends_on:
      - redis
      - db
    env_file:
      - .env
    volumes:
      - .:/app

  redis:
    image: redis:alpine
    container_name: "redis"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "6379:6379"

  db:
    image: postgres:13
    restart: always
    container_name: "postgres"
    env_file:
      - .env  # Загружаем переменные окружения из .env
    volumes:
      - postgres_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    container_name: "rabbitmq"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "check_running" ]
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env  # Загружаем переменные окружения из .env
    ports:
      - "5672:5672"
      - "15672:15672"  # Веб-интерфейс RabbitMQ

volumes:
  postgres_data:
